#include <stdio.h>
#include <string.h>
#include <stdlib.h>

const char *parityCalculator(char *message,int messagelength)
{
    printf("%s\n",message);
    char* returnarray = (char*)malloc(messagelength + 8 + 10 * sizeof(char));
    int i,j;
    int arr[messagelength][8];
    // Assignment of messages bits to two dimentional array
    for(j = 0; j < messagelength; j++ )
    {
        int x = 0;
        char c = message[j];
        for (i = 7; i >= 0; i--) 
        {
            arr[j][x] = (c >> i) & 1;
            x++;
        }
    }
    
    // Checking of two dimentional Array
    
    for(j = 0; j < messagelength; j++)
    {
        printf("Arrays binary number of row %d :",j+1);
        for (i = 0; i < 8; i++) 
        {
            printf("%d",arr[j][i]);
        }
        printf("\n");
    }
    
    int verticalparityarr[8];
    int col,row;
    int horizontalarray[messagelength];
    
    int parity = 0;
    
    //Calculation of messages vertical parity
    
    for (col = 0; col < 8; col++) 
    {
      int parity = 1;
      for (row = 0; row < messagelength; row++) 
      {
        parity ^= arr[row][col];
      }
      verticalparityarr[col] = parity;
      
      // Cheking of horizontalarrays parity
      
      printf("Vertical parity of column %d: %d\n", col+1, verticalparityarr[col]);
    }
    
    //Calculation of messages horizontal parity
    
    for (i = 0; i < messagelength; i++) 
    {
        parity = 1;
        char c = message[i];
        while (c) 
        {
          parity ^= c & 1;
          c >>= 1;
        }
        horizontalarray[i] = parity;
    }
    
    for(i = 0 ; i < messagelength; i++)
    {
        printf("Horizontal parity value of %d. char is :%d\n",i+1,horizontalarray[i]);
    }
    
    
   
    memcpy(returnarray, verticalparityarr, sizeof verticalparityarr);
    
    for(i = 0;i < 8; i++)
    {
        printf("%d",verticalparityarr[i]);
    }
    printf("\n");
    
    for(i = 0;i < 8;i++)
    {
    returnarray[i] = (char)verticalparityarr[i] + 48;
    }
    
    j = 0;
    
    for(i = 8;i < messagelength+8;i++)
    {
        
        returnarray[i] = (char)horizontalarray[j] + 48;
        j++;
    }
    
    return returnarray;
}

int main()
{
    char *message;
    size_t size = 0;
    ssize_t n;
    
    n = getline(&message, &size, stdin);
    
    int i;
    char *str ;
    
    str = parityCalculator(message,strlen(message));
    
    printf("\n%s",str);
    
    //strcat(seperator,message);
    
    //strcat(seperator,str);
    
    
    
}
